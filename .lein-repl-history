(require 'clj-geoip.core)
(user 'clj-geoip.core)
(use 'clj-geoip.core)
(geoip-init)
(use 'clj-geoip.core)
(geoip-init)
(use 'clj-geoip.core)
(geoip-init)
(use 'clj-geoip.core)
(geoip-init)
exut
exit
(use 'clj-geoip.core)
(geoip-init)
(lookup "8.8.8.8")
exit
(doto (Thread.) (.currentThread))
(.currentThread (Thread.))
(Thread/currentThread)
(-> (Thread/currentThread) (.getContextClassLoader))
(-> (Thread/currentThread) .getContextClassLoader .getResources)
(-> (Thread/currentThread) .getContextClassLoader (.getResources "./GeoLiteData.dat"))
(-> (Thread/currentThread) .getContextClassLoader (.getResources "./GeoLiteCity.dat" "./GeoIPASNum.dat"))
(-> (Thread/currentThread) .getContextClassLoader (.getResources "./GeoLiteCity.dat"))
(-> (Thread/currentThread) .getContextClassLoader (.getResource "./GeoLiteCity.dat"))
(require 'clj-geoip.core)
(clj-geoip.core/get-dbs)
(require 'clj-geoip.core :reload)
(clj-geoip.core/get-dbs)
*e
(use 'clojure.stacktrace)
(print-stack-trace *e)
(-> (Thread/currentThread) .getContextClassLoader (.getResource "./GeoLiteCity.dat"))
(java.io.File. *1)
(-> (Thread/currentThread) .getContextClassLoader (.getResource "./GeoLiteCity.dat") URI.)
(-> (Thread/currentThread) .getContextClassLoader (.getResource "./GeoLiteCity.dat") .toURI)
(require 'clj-geoip.core :reload)
(clj-geoip.core/get-dbs)
((geoip-init) "8.8.8.8")
(require '[clj-geoip.core :refer :all])
((geoip-init) "8.8.8.8")
(require '[clj-geoip.core :refer :all] :reload)
((geoip-init) "8.8.8.8")
(require '[clj-geoip.core :refer :all] :reload)
((geoip-init) "8.8.8.8")
(require '[clj-geoip.core :refer :all] :reload)
((geoip-init) "8.8.8.8")
(require '[clj-geoip.core :refer :all] :reload)
((geoip-init) "8.8.8.8")
(geoip-init)
(require '[clj-geoip.core :refer :all] :reload)
(geoip-init)
(*1 "8.8.8.8")
(require '[clj-geoip.core :refer :all] :reload)
(geoip-init)
(*1 "8.8.8.8")
(geoip-init)
(require '[clj-geoip.core :refer :all] :reload)
(geoip-init)
(*1 "8.8.8.8")
(require '[clj-geoip.core :refer :all] :reload)
(geoip-init)
(.getLocation (:city *1) "8.8.8.8")
(require '[clj-geoip.core :refer :all] :reload)
(geoip-init)
(*1 "8.8.8.8")
(require '[clj-geoip.core :refer :all] :reload)
(geoip-init)
(require '[clj-geoip.core :refer :all] :reload)
(geoip-init)
(*1 "8.8.8.8")
(require '[clj-geoip.core :refer :all] :reload)
(geoip-init)
(*1 "8.8.8.8")
(require '[clj-geoip.core :refer :all] :reload)
(geoip-init)
(*1 "8.8.8.8")
(require '[clj-geoip.core :refer :all] :reload)
(geoip-init)
(*1 "8.8.8.8")
(require '[clj-geoip.core :refer :all] :reload)
(geoip-init)
(*1 "8.8.8.8")
(require '[clj-geoip.core :refer :all] :reload)
(geoip-init)
(*1 "8.8.8.8")
(require '[clj-geoip.core :refer :all] :reload)
(geoip-init)
(*1 "8.8.8.8")
(doc slurp)
(require '[clj-geoip.core :refer :all] :reload)
(geoip-init)
(require '[clj-geoip.core :refer :all] :reload)
(geoip-init)
(use 'clojure.stacktrace)
(e)
(geoip-init)
(print-strack-trace *1)
(print-stack-trace *e)
(geoip-init)
(print-stack-trace *e)
(require '[clj-geoip.core :refer :all] :reload)
(geoip-init)
(*1 "8.8.8.8")
(require '[clj-geoip.core :refer :all] :reload)
(*1 "8.8.8.8")
(geoip-init)
(*1 "8.8.8.8")
(require '[clojure.java.io :refer :all])
(-> "GeoLiteCity.dat" resource)
(-> "GeoLiteCity.dat" resource java.io.File.)
(-> "GeoLiteCity.dat" resource .getPath java.io.File.)
(require '[clj-geoip.core :refer :all] :reload)
(geoip-init)
(*1 "8.8.8.8")
(require '[clj-geoip.core :refer :all] :reload)
(geoip-init)
(use 'clojure.stacktrace)
(print-stack-trace *e)
(require '[clj-geoip.core :refer :all] :reload)
(geoip-init)
(*1 "8.8.8.8")
(require '[clj-geoip.core :refer :all] :reload)
(geoip-init)
(require '[clj-geoip.core :refer :all] :reload)
(geoip-init)
(*1 "8.8.8.8")
(doc read-or-nil)
(docs read-or-nil)
(require '[clj-geoip.core :refer :all] :reload)
(geoip-init)
(require '[clj-geoip.core :refer :all] :reload)
(geoip-init)
(*1 "8.8.8.8")
(use 'cojure.stacktrace)
(use 'clojure.stacktrace)
(*3 "8.8.8.8")
(geoip-init)
(*1 "8.8.8.8")
(print-stack-trace *e)
(require '[clj-geoip.core :refer :all] :reload)
((geoip-init) "8.8.8.8")
((geoip-init) "67.50.8.8")
(require '[clj-geoip.core :refer :all] :reload)
((geoip-init) "67.50.8.8")
exit
